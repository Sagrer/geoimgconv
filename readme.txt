GeoImageConverter
v 0.3.0a

Copyright © 2017 Александр (Sagrer) Гриднев
sagrer@yandex.ru

Сайт программы: http://personal.sagrer.ru/tracs/geoimgconv

Программа распространяется на условиях лицензии GNU GPL v3 или выше,
см. файл gpl.txt

Об условиях распространения используемых в программе библиотек - см.
файл libs_licenses.txt
_______________________________________________________________

	GeoImageConverter - небольшая программка для причинения разнообразных
преобразований изображениям с геоданными, в данный момент - это файлы
формата GeoTIFF.
	Разнообразность преобразований разнообразием на данный момент также
не блещет и заключается в применении к изображениям медианного фильтра,
только и всего.	
_______________________________________________________________
	
	Если вы читаете этот файл - значит по какой-то причине имеете дело
с исходным текстом. Сборка программы тестировалась под Ubuntu Linux 17.10,
а также под Windows в Visual Studio 2008, 2015 и 2017. Сборка под MinGW и
например в CodeBlocks - теоретически возможна, но сборочные скрипты для
этого пока не актуализированы, их ещё предстоит доработать.

	О том, как правильно собрать программу под linux - читайте файл
readme_linux.txt
	О сборке под windows - читать readme_windows.txt.
	
	Программа зависит от следующих библиотек: icu, boost, gdal.
При наличии их dev-версий в системе и установленных make и cmake - теоретически
достаточно запустить make из корня директории с исходниками. На практике есть
ньюансы, о которых можно прочитать в вышеназванных файлах.
	
_______________________________________________________________

	О правилах оформления кода.
	
	Я понимаю почему многие вещи в подходе к оформлению кода в STL и Boost
сделаны именно так а не иначе, но мне всё же не хотелось бы отказываться от
CamelCase, а также от чётких правил, по которым всегда можно понять является
ли идентификатор полем или же методом + видеть права доступа к нему. В то же
самое время применяемые в том же Boost правила именования файлов более чем
логичны, и я буду стараться их придерживаться.

	Таким образом, имеем следующий набор правил, частично навеянный вот этим
документом ( http://geosoft.no/development/cppstyle.html ):

	По именам и содержимому файлов:

 * Имена файлов и директорий записываются строго в нижнем регистре. Допустимы
только латинские буквы, цифры, точка, символы "-" и "_". Заголовочные файлы
имеют расширение .h, компилируемые (в obj-ы) файлы преимущественно с кодом методов
имеют расширение .cpp, а добавляемые по #include файлы с кодом шаблонных функций
(если например реализация шаблонного класса отделена от заголовка) - имеют расширение
.ipp. Исключение в общем случае - всё что не является исходными текстами на C++, например
bat-файлы или CMakeLists.txt, там именование файлов - произвольное.
 * Во всех путях разделителем является строго символ "/". Исключение - bat-скрипты и
прочие явно платформоспецифичные вещи.
 * Желательно держать реализацию методов класса отдельно от его заголовка, даже
если это шаблонный класс. Т.е. каждый класс имеет .h и .cpp или ipp-файл.
Допустимо держать в одной паре .cpp\.ipp и .h-файлов несколько классов если они
сильно друг с другом связаны и обычно применяются вызывающим кодом вместе.
 * Если вызывающий код использует шаблонный класс - делать #include "filename.ipp"
желательно в cpp-файле а не в .h чтобы не растаскивать содержимое ipp по всему
проекту.
 * В качестве отступов используются символы табуляции - они и только они, никаких
отступов из пробелов за исключением рисования "рамочек" из символов. В настройках
редактора рекомендуемый размер табуляции - 4 пробела.
 * Кодировка файлов исходных текстов - utf-8 без BOM. Подразумевается что все сроки
внутри программы хранятся в utf-8 и преобразуются только непосредственно перед
выходом из программы например в аргументе системного вызова. Аналогично - все
входящие строки по-возможности немедленно преобразуются в utf-8.
 * Длина строк - автоматически не контролируется, но по возможности нужно стараться не
выходить за разумные рамки около 100 символов.
 * *.h-файлы защищаются от повторного включения с помощью #pragma once.
 * Формат конца строк - всё таки crlf, т.к. работу над программой веду в основном под
Windows и эпизодически crlf всё же попадают в lf-файлы - уж не знаю кто именно глючит
- студия или notepad++, но факт есть факт.

	По наименованию идентификаторов:
 * В коде абсолютно всё должно быть помещено в тот или иной namespace. Имена
неймспейсов записываются строго в нижнем регистре, с символом подчёркивания
для разделения слов: the_snake_case_namespace.
 * Имена констант, #define-ов, элементов enum-ов записываются в
THE_SCREAMING_SNAKE_CASE.
 * Имена классов, структур и прочих типов, а также имена функций и методов - записываются
в обычном CamelCase с некоторыми оговоренными ниже дополнениями.
 * Имена любых переменных и полей классов\структур - записываются в mixedCase - т.е.
с маленькой буквы.
 * Имена методов доступа к полям классов\структур типа getValueName - записывются
так же как и имена переменных, т.е. в mixedCase.
 * Все приватные элементы классов и структур дополняются "хвостиком" из символа
подчёркивания в конце идентификатора, примерно так: this->PrivateMethod_(privateField_);
	
	О применении в программе русского\английского языков:
	
	Большинство текстов и комментарии в коде на русском. Я не вижу смысла в том чтобы 
заморачиваться с сочинительством того же самого на корявом английском для программы,
написанной под довольно узкую задачу, для крайне узкого и известного заранее круга
русскоязычных пользователей, и в код которой вряд ли кто-то кроме меня вообще
когда-нибудь полезет.
	В прочем, все идентификаторы будут, как и положено, основываться на словах
английского языка, как минимум потому что транслит - нечитабельная жуть,
так что в некоторой степени читабельность кода для не-русскоговорящих должна остаться.
	Будет ли прикручиваться какой-нибудь GetText для мультиязычности - в данный момент
понятия не имею, но по идее в этом вряд ли есть хоть какая-то необходимость, по уже
перечисленным выше причинам :). Так что пока - текст выводимых сообщений захардкожен прямо
в исходниках на одном единственном языке.
_______________________________________________________________
This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
(Это свободная программа: вы можете перераспространять ее и/или изменять
   ее на условиях Стандартной общественной лицензии GNU в том виде, в каком
   она была опубликована Фондом свободного программного обеспечения; либо
   версии 3 лицензии, либо (по вашему выбору) любой более поздней версии.

   Эта программа распространяется в надежде, что она будет полезной,
   но БЕЗО ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА
   или ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной
   общественной лицензии GNU.

   Вы должны были получить копию Стандартной общественной лицензии GNU
   вместе с этой программой. Если это не так, см.
   <http://www.gnu.org/licenses/>.)
_______________________________________________________________
