GeoImageConverter
v 0.3.0a

Copyright © 2017 Александр (Sagrer) Гриднев
sagrer@yandex.ru

Сайт программы: http://personal.sagrer.ru/tracs/geoimgconv

Программа распространяется на условиях лицензии GNU GPL v3 или выше,
см. файл gpl.txt

Об условиях распространения используемых в программе библиотек - см.
файл libs_licenses.txt
_______________________________________________________________

	В данном файле содержится инструкция по сборке программы из исходников
под Windows.

	В данный момент поддерживается сборка в следующих IDE и компилляторах:
	
	* gcc (MinGW в комплекте с CodeBlocks) - теоретически возможно, но требуется
доработка скриптов.
	* Microsoft Visual C++ 2008 Express Edition.
	* Microsoft Visual Studio 2015 Community Edition.
	* Microsoft Visual Studio 2017 Community Edition.

	В принципе можно заставить программу собираться и на других версиях Visual Studio
путём несложного редактирования сборочных скриптов, по крайней мере скрипты для сборки
под 2008 и под 2015 версии студии отличаются очень слабо. С 2017 версией сложнее т.к.
Microsoft убрала устанавливавшуюся ранее при инсталляции переменную окружения, с помощью
которых скрипт легко мог найти путь к компиллятору, теперь для поиска этого пути нужен
немаленький скрипт и наличие установленной студией программки vswhere по стандартному пути.

	Программа поставляется с make-файлом стандартного для GNU Make формата, но он будет
работать только если в системе установлены в стандартные места dev-версии всех необходимых
библиотек, иначе СMake не сможет найти зависимости. Поэтому в комплекте с
исходниками идут несколько bat-скриптов, с помощью которых можно запустить как
сборку из исходников нужных библиотек, так и сборку самой программы. Для их работы
нужно предварительно установить несколько переменных окружения.
_______________________________________________________________

	Что потребуется для сборки:
	
	* Любой поддерживаемый компиллятор или среда разработки (см. выше).
	* Библиотека ICU: http://site.icu-project.org/ Тестировалось с версиями 4.4.2, 59.1, 60.2.
	* Библиотека Boost: http://www.boost.org/ рекомендую 1.66.0 или возможно выше. Собирается
и на 2008 и на 2015 и на 2017 студии, с 1.65.0 были проблемы.
	* Библиотека GDAL: http://www.gdal.org/ Тестировалось на версиях 2.2.1 и 2.2.3
	* Альтернативно - на сайте программы возможно есть в наличии набор из уже скомпиллированных
библиотек для нужного компиллятора - проверьте на http://personal.sagrer.ru/tracs/geoimgconv .
Но вы всегда можете скачать исходники этих библиотек и собрать их самостоятельно, следуя
инструкции ниже.
	* CMake: https://cmake.org/ версии не ниже 3.2, желательно 3.10 и выше. Если для сборки будет
использоваться Boost версии 1.66 или выше (например если уже скомпилированные библиотеки
скачивались с сайта этой программы) - CMake _должен_ быть не ниже версии 3.10, иначе он Boost
не найдёт :(.
_______________________________________________________________

	О пакетных менеджерах.
	
	Я думал о том чтобы воспользоваться msys или vcpkg для того чтобы подтягивать требуемые
библиотеки, но пока решил ими не пользоваться т.к. всё что мне пока удалось найти - прибито
гвоздями к какому-то одному компиллятору, а мне хотелось бы чтобы исходник собирался максимально
универсально. Именно этим обусловлены результаты велосипедостроительства, которые вы можете
наблюдать ниже.
_______________________________________________________________

	Настройка окружения.
	
	Стандартных путей для установки dev-версий библиотек (*.lib, *.h-файлов и прочего
подобного) в Windows не определено. Кроме того, хотелось бы чтобы библиотеки, собранные
одним и тем же компиллятором лежали в своей директории, отдельно от собранных другим
компиллятором - во избежание различных неприятных и труднонаходимых эффектов при линковке
программы, собранной одним компиллятором с библиотеками, собранными другими компилляторами.
	Поэтому нужно создать новую пустую директорию для выбранного компиллятора. Пусть это
будет папка по пути, скажем, C:\DevLibs\vs2008 - для 2008 студии. Аналогично можно создать
каталоги C:\DevLibs\vs2015 и C:\DevLibs\vs2017 для 2015 и 2017 студий соответствено - в случае
если планируется использовать сразу несколько компилляторов на одном компьютере.
	Внутри таких директорий сборочные скрипты создадут каталоги bin, include и lib, что
в принципе соответствует тому, как раскладываются dev-версии библиотек при установке их в linux.
	Путь к данному каталогу будет скармливаться CMake чтобы он мог автоматически найти все
нужные для сборки библиотеки. По этому же пути будут устанавливаться сами библиотеки после их
сборки из исходников, ну или после скачивания уже заранее скомпиллированных бинарников.
	Чтобы скрипты смогли найти этот путь - его надо указать в переменной окружения (желательно
на системном уровне, но и уровень пользователя подойдёт).
	Да, на всякий случай стоит всё-же сказать что папки, каталоги и директории - это здесь,
далее по тексту и выше по тексту если найдётся - синонимы, обозначают одно и то же %).

	Как установить переменную окружения (если вдруг кто-то не знает):
	"Проще" всего это сделать стандартными средствами Windows: тыркаем ПКМ (правой кнопкой мыши) по
значку Компьютер, там выбираем "свойства". Появится окно "Система" панели управления (старой,
"классической" в терминологии Windows 10). В это же окно на Win10 (если не выведен значок компьютера
на рабочий стол) можно попасть через меню Пуск->Параметры (кнопка с зубчатым колесом), там выбрать
"Система", далее слева пункт "О системе", затем справа ссылка "Сведения о системе".
	Затем нажимаем слева ссылку "Дополнительные параметры системы" (уровень вложенности уже похож
на анекдот) и, наконец, попадаем на древнейший исторический слой времён Windows 95 наверное - окно
"Свойства системы". Там на вкладке "Дополнительно" (она открывается по умолчанию) внизу справа есть
волшебная кнопка "Переменные среды". Она то нам и нужна. Смело нажимаем и получаем окошко, разделённое
на 2 половины. Наверху - переменные среды пользователя. Внизу - переменные среды системы.
	Эти переменные сохраняются после перезагрузки и там удобно хранить постоянные настройки для
различных скриптов. Создавать переменные рекомендую на уровне системы.
	Да, а когда-то в "Свойства системы" можно было попасть одним кликом :(.

	Итак, указываем путь к созданному ранее каталогу. Имя переменной будет различаться в
зависимости от выбранного компиллятора. Возможные имена переменных:
	* DevLibsVs2008 - для Visual C++ 2008.
	* DevLibsVs2015 - Visual Studio 2015.
	* DevLibsVs2015_x64 - Visual Studio 2015, для 64-битных версий библиотек.
	* DevLibsVs2017 - Visual Studio 2017.
	* DevLibsVs2017_x64 - Visual Studio 2017, для 64-битных версий библиотек.
	
	Путь в переменную записываем без последнего слеша.
	
	Теперь нужно убедиться, что скрипты смогут найти путь к вашему компиллятору. Visual Studio до
2015 версии включительно - создавали на уровне системы переменную окружения с соответствующим путём.
Для 2008 студии это была переменная VS90COMNTOOLS, для 2015 - VS140COMNTOOLS.
	Если такая переменная у вас существует (поискать можно во всё том же окошке), и там указан
актуальный путь типа C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\ - значит
всё ок. Если переменной нет, но у вас 2017 студия - тоже всё ок, главное чтобы она была обновлена
до самой свежей версии (механизм поиска пути через vswhere разработчики добавили туда не сразу).

	Несколько слов о 64-битной версии. Сборка x64-версии программы поддерживается для 2015 и 2017 студий.
Делается это одним и тем же компиллятором, различаются только настройки запуска сборки. Но, что
логично - библиотеки также должны быть собраны в той же разрядности. Поэтому имеем по 2 разных
переменных для 2015 и 2017 студий. Достаточно указать какую-то одну. Если указаны обе - они должны
содержать путь к разным каталогам.
	Сама по себе 64-битность нужна только для того чтобы программа смогла потребить более 4 гигабайт
памяти. Насколько это оправдано сказать пока сложно, обработка изображений небольшими блоками пока
ещё не реализована, но по идее она позволит программе работать, потребляя всего несколько сотен
мегабайт памяти без сильной просадки по производительности. До тех пор огромные (в несколько
гигабайт) картинки корректно обрабатываются только в х64 версии.
_______________________________________________________________

	Установка прекомпиллированных библиотек.
	
	Этот вариант позволяет сэкономить кучу времени, но неприменим если вы хотите воспользоваться
иной версией библиотек (или иными параметрами их сборки), либо если не доверяете чужим бинарникам
и хотите собрать всё сами. Ну или просто не нашли версию для вашего компиллятора.

	Просто скачайте с сайта программы комплект библиотек под ваш компиллятор, распакуйте
полученный архив. Затем вынутую из архива папку с именем врода vs2015 - нужно положить по такому
пути, чтобы на неё указывала созданная по инструкции выше переменная окружения.
	Это всё :).
_______________________________________________________________

	Вариант для истинных красноглазиков. Сборка и установка библиотек
из исходников.
	
	Возможно вы хотите собрать библиотеки с другими параметрами. Или у вас какой-то экзотичный
компиллятор. Или вы просто не смогли найти прекомпиллированную версию для вашей Visual Studio 2032
по причине того что программа не поддерживается уже много лет. В любом случае, приготовьтесь
потратить на сборку несколько часов. Хотя, если в вашем 2032+ на сборку Boost всё ещё нужно несколько
часов - с миром явно что-то не так :(.

	Итак, вы создали каталог для хранения установленных dev-версий библиотек и указали путь на
него в переменной окружения. Теперь создайте ещё один путь - там будут лежать исходники
библиотек и сборочные скрипты. Туда сразу же нужно скопировать содержимое каталога сборочных
скриптов из DevScripts\WinDepsBuild данного (этой программы!) дерева исходников.
	Теперь соберём отдельные библиотеки, о чём ниже.
_______________________________________________________________

	Сборка ICU.
	
	Для Visual Studio 2015 и 2017 подойдёт скорее всего любая современная версия библиотеки.
Я тестировал на версииях 59.1 и 60.2. Скачиваем её с http://site.icu-project.org/, распаковываем
содержимое архива в нашу папку для исходников библиотек, пусть лежит рядом со скриптами в отдельном
каталоге. Скорее всего там будет каталог icu, внутри которого должны присутствовать папки packaging
и source.
	Для Visual Studio 2008 последняя подходящая версия - 4.4.2. Её придётся искать в архиве
старых версий. Либо скачать у меня с сайта.

	ВАЖНО: Каталог с исходником библиотеки _должен_ называться icu, либо он может называться иначе,
но придётся предварительно открывать вызываемые скрипты и менять там имя каталога в параметре SRCDIR.
Сборочные скрипты должны лежать рядом с каталогом icu, т.к. внутри того же каталога что и icu.

	Сборка под Visual С++ 2008 Express.
	Для vs2008 нет сборочного скрипта, т.к. разработчики библиотеки для сборки под студией дают только
sln-файлы, а в Express-версию студии программку для запуска сборки из консоли скриптом попросту не
положили. Поэтому идём в каталог icu\source\allinone и открываем файлик allinone.sln в 2008й вижле.
Теперь надо запустить сборку сначала для Debug а потом и для Release-конфигураций для всего решения.
Затем нужно убедиться что data собралась правильно (о чём подробнее ниже). Затем можно запускать
скрипт установки - запускаем install_icu_vs2008.bat .

	Сборка под Visual Studio 2015.
	Запускаем сборочный скрипт - файл build_icu_vs2015.bat . Если всё отработает хорошо - запускаем
скрипт установки - install_icu_vs2015.bat

	Аналогичным образом сборка выполняется для всех остальных вариантов:
	* Visual Studio 2015 x64 - файл build_icu_vs2015_x64.bat для сборки и install_icu_vs2015_x64.bat
для установки.
	* Visual Studio 2017 - build_icu_vs2017.bat для сборки и install_icu_vs2017.bat для установки.
	* Visual Studio 2017 x64 - файл build_icu_vs2017_x64.bat для сборки и install_icu_vs2017_x64.bat
для установки.

	Важный момент - иногда после сборки библиотека data собирается в stub-варианте - т.е. соответствующая
dll-ка не содержит никаких данных. С такой библиотекой не работают нормально локали. Установочные
скрипты отслеживают этот момент и выдают предупреждение если библиотека весит мало т.е. собралась
в stub-варианте. Помимо этого сборочные скрипты при обнаружении stub-библиотеки после завершения
основной сборки - запускают пересборку проекта makedata в надежде что соберётся правильная версия
Однако всё же есть вероятность что stub-версия проскочит до момента установки. Если это просходит
- нужно открыть файл icu\source\allinone\allinone.sln в нужной версии Visual Studio, выбрать там
проект makedata и запустить его пересборку. После пересборки - проверить размер файла
icu\bin\icudt*.dll где звёздочка - несколько символов (номер версии). Если размер файла - несколько
килобайт - это stub-версия. Если же там около десятка или больше мегабайт - это нормальная версия.
	Для Visual C++ 2008 сборочного скрипта нет и этот момент надо контроллировать вручную _всегда_!
_______________________________________________________________

	Сборка boost.
	
	ВНИМАНИЕ! Сборку boost можно выполнять ТОЛЬКО ПОСЛЕ сборки и установки ICU! На этапе конфигурации
boost icu должен быть обнаружен, иначе в boost не будут нормально работать локакали!
	
	Для Visual С++ 2008 наблюдались проблемы с версией 1.65.0. Версии 1.64.0 и 1.66.0 собирались
нормально. Для 2017 студии 1.65.0 и 1.66.0 мусорят сообщениями при сборке, причём по разному, однако
собираются. 1.65 ругается на неизвестный компиллятор а 1.66 наоборот - на то что для такого могучего
компиллятора хорошо бы скачать boost версии новее чем 1.66. Последнее несколько странно но не критично,
рекомендую использовать boost 1.66.0 или возможно выше.

	Скачиваем нужную версию библиотеки с http://www.boost.org/ и распаковываем содержимое архива
в папку для исходников библиотек. Сборочные скрипты должны лежать в этой же папке (куда распаковываем).
Скорее всего из архива будет вынут каталог с именем вроде boost_1_66_0. Его НУЖНО либо переименовать
в boost, либо открыть соответствующие скрипты и изменить там имя каталога в переменной SRCDIR.
	Сборка и установка для всех поддерживаемых компилляторов выполняется единообразно и просто
- запускаем сборочный скрипт, по его завершению запускаем скрипт установки.
	
	Соответствие имён скриптов компиллятору должно быть понятно интуитивно, но всё же распишу его:
	* Visual C++ 2008 - build_boost_vs2008.bat для сборки и install_boost_vs2008.bat для установки.
	* Visual Studio 2015 - build_boost_vs2015.bat для сборки и install_boost_vs2015.bat для установки.
	* Visual Studio 2015 x64 - build_boost_vs2015_x64.bat для сборки и install_boost_vs2015_x64.bat
для установки.
	* Visual Studio 2017 - build_boost_vs2017.bat для сборки и install_boost_vs2017.bat для установки.
	* Visual Studio 2017 x64 - build_boost_vs2017_x64.bat для сборки и install_boost_vs2017_x64.bat
для установки.

_______________________________________________________________

	Сборка GDAL.
	
	Сборка тестировалась на версииях 2.2.1 и 2.2.3 и нормально работала на всех компилляторах.
	
	Скачиваем библиотеку с http://www.gdal.org/ и распаковываем содержимое архива в папку для исходников
библиотек. Сборочные скрипты должны лежать в этой же папке (куда распаковываем). Скорее всего из архива
будет вынут каталог с именем вроде gdal-2.2.3. Его НУЖНО либо переименовать в gdal, либо открыть
соответствующие скрипты и изменить там имя каталога в переменной SRCDIR.

	Сборка и установка для всех поддерживаемых компилляторов выполняется единообразно и просто
- запускаем сборочный скрипт, по его завершению запускаем скрипт установки.
	
	Соответствие имён скриптов компиллятору должно быть понятно интуитивно, но всё же распишу его:
	* Visual C++ 2008 - build_gdal_vs2008.bat для сборки и install_gdal_vs2008.bat для установки.
	* Visual Studio 2015 - build_gdal_vs2015.bat для сборки и install_gdal_vs2015.bat для установки.
	* Visual Studio 2015 x64 - build_gdal_vs2015_x64.bat для сборки и install_gdal_vs2015_x64.bat
для установки.
	* Visual Studio 2017 - build_gdal_vs2017.bat для сборки и install_gdal_vs2017.bat для установки.
	* Visual Studio 2017 x64 - build_gdal_vs2017_x64.bat для сборки и install_gdal_vs2017_x64.bat
для установки.
_______________________________________________________________

	Сборка собственно программы.
	
	Если вы успешно собрали и установили все библиотеки или просто распаковали прекомпиллированную
их версию, добавив путь к ней в соответствующую переменную окружения - можно запускать сборку
самой программы.
	В корневом каталоге с исходными текстами лежит набор скриптов с именами вида build_*.bat где
на месте звёздочки указан компиллятор и разрядность.
	Для всех вариантов кроме Visual C++ 2008 достаточно просто запустить нужный bat-файл и
дождаться завершения сборки.
	В корне каталога с исходниками появтся новый каталог с именем вида *_build где звёздочка
означает всё то же самое что и раньше :). Внутри можно будет найти папку с релизной версией
бинарника программы и необходимыми библиотеками.
	Если программа собирается в Visual C++ 2008 - нужно руками открыть в студии sln-файл и
запустить сборку нужной (debug или release) версии.
	Скрипт для автоматического формирования комплекта бинарников для распространения конечному
пользователю пока отсутствует.